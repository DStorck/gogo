
# GO Library to use JUJU commands to bring up a Kubernetes cluster

### Pre-reqs

`go get gopkg.in/yaml.v2`

## Usage

Currently can bring up kubernetes cluster in CNCT maas lab. Later iterations will include aws and azure.

Working commands:

- `SetCloudAndCreds()` - sets cloud and credentials information for use with `juju`
- `Spinup()` - will spinup cluster from specified creds/cloud/bundle
- `DisplayStatus()` - will display results of running `juju status`
- `ClusterReady()` - will return boolean corresponding to readiness of cluster
- `GetKubeConfig()` - will print out kubeconfig to stdout
- `DestroyCluster()` - will tear down juju controller and associated cluster

## Notes:

We will pass in cloud and credential information from the [cluster controller](https://github.com/samsung-cnct/cluster-controller).

Sample file to bring up maas cluster:

```package main

import (
	"github.com/dstorck/gogo"
)

var testRunMaas = gogo.Juju{
	Kind:     "maas"
	Name:     "test-cluster",
	Bundle:   "cs:bundle/kubernetes-core-306",
	MaasCl:    myCloud,
	MaasCr:    myCreds,
}

var myCloud = gogo.Cloud{
	Type:     "lab",
	Endpoint: "http://192.168.2.24/MAAS/api/2.0",
}

var myCreds = gogo.Credentials{
	CloudName: "lab",
	Username:  "<your-maas-username>",
	MaasOauth: "<your-maas-secret>",
}


// sample commands, not meant to be run all at once
func main() {
  testRunMaas.Spinup()
  testRunMaas.DisplayStatus()
  testRunMaas.ClusterReady()
  testRunMaas.GetKubeConfig()
  testRunMaas.DestroyCluster()
}
```

Sample file to bring up aws cluster:
```
package main

import (
	"github.com/dstorck/gogo"
)

var testRunAWS = gogo.Juju{
	Kind:   "aws",
	Name:   "test-cluster",
	Bundle: "cs:bundle/kubernetes-core-306",
	AwsCr:  myAWScreds,
	AwsCl:  myAWScloud,
}

var myAWScreds = gogo.AWSCredentials{
	Username:  "deirdre",
	AccessKey: "<access-key>",
	SecretKey: "<secret-key",
}

var myAWScloud = gogo.AWSCloud{
	Region: "aws",
}

func main() {

	// testRunAWS.SetCloudAndCreds()
	// testRunAWS.Spinup()
	// testRunAWS.ClusterReady()
	// testRunAWS.GetKubeConfig()
	// testRunAWS.DestroyCluster()
}
```
